MenuShell


Compulsory Assignment




BETA

Prerequisites
This assignment assumes you at least have basic knowledge of the following:

The 4 pillars of object-oriented programming
Abstraction
Encapsulation
Inheritance
Polymorphism
Basic object-oriented analysis and design
 You’re able to break down the problem domain into classes (nouns), methods (verbs) and fields (attributes).
Interfaces
Hand-in instructions
In order for the assignment to be considered completed the following is required:

Repo has been created at GitHub and all changes have been pushed to it. Note that all changes should be located in the develop branch. It’s ok for the master branch to contain the initial files created by Visual Studio (including the initial project files), but all commits made by the student should be located in the develop branch.
A pull-request (PR) has been created and the link for it has been sent to the teacher via Slack for review.
Code compiles, i.e. there are not errors in the code preventing the compilation of it.
All views outlined in the task has been implemented, i.e:
Login view
Administrator main view
Add user view
Delete user view
It should be possible to
Log in
Add a new user
Log in as the new user
Remove an existing user

Once the assignment has been approved, the PR is tagged with "approved".

Description
This assignment is about building a simple console-based application that has a login view and simple administrative views for adding and removing users. By building this system, besides displaying knowledge in how it can be done, the student also creates a template of sort which can be used for future console-based projects the student might engage in.

By using this project as the base for future ones, the student can significantly reduce the amount of time needed to build the application, by having to focus less on the plumbing- related work, such as figuring out how to split up code related to various views, handling login and data entry, and instead, being able to focus on solving the actual business problem.
Logging in
In most business applications it’s necessary to restrict access to the system, something that’s commonly referred to as authentication. By using credentials such as username and password, we force the user to identify themselves, thus proving their identity.

We usually also need to restrict certain parts of the system, including data and available operations, to certain authenticated users. For example, only system administrators should be allowed to administer the system itself, such as adding and removing users.

We can think of this as having a role. In the case of a system administrator, they would have the role “Administrator” which would imply certain privileges in our system.

In this basic system we’re building, a user can only have one role. However, we can easily extend the system to allow users to have multiple roles, if need be.

Depending on responsibilities, users should preferably only have access to data and operations needed in their day-to-day work. This minimizes both intentionally malicious and accidental changes to the system.
Splitting up views
Usually, when we perform a specific task, we do that within a specific context. For example, when logging in as an administrator, we expect to be able to choose among one or several views that get more specific the further down the menu we get.

Data entry 
An application that doesn’t allow us to enter or change existing data is in most cases rather limiting. We need views that allow the user to enter some data, which we then act upon, such as storing it, or making decisions based on it.

Artifacts
The following section lists the artifacts that need to be in place in order for the assignment to be approved.
Views
Base view
All views have certain things in common. In our case we want all views to have a title, which should be displayed at the top part of the terminal window.

By creating an abstract class named BaseView, we signal our intent that all views have certain things in common. By inheriting from it, we minimize code duplication.

abstract class BaseView
{
   public string Title { get; }

   BaseView(string title)
   {
      Title = title;

      Console.Title = title;
   }
}

Base view
Login View
We need to create a view that prompts the user for a username and password. The user should only be able to progress from this view if valid credentials are provided. Once the user has been successfully authenticated, we should return an object of type User, representing the authenticated user.

Username:
Password:

Is this correct? (Y)es (N)o

Login view

If the login failed, we clear the screen and display the following message for 2 seconds:

Login failed. Please try again.

Login view

Our simple application needs to come with a predefined user which has the "Administrator" role. It’s a chicken-and-egg problem - in order to create users in our system, we need to be able to log on as a user that has the privilege to add new users. But if the system doesn’t come with such a user, who are we going to create new ones?

One option could of course be to display an installation view of sort, which upon initial execution of the application, prompts us for the credentials for an initial user which will be granted the "Administrator" role. However, it’s not uncommon that applications come with a default user which has full privilege to the system, and thus can be used to create additional users. This is the approach we’ll choose for our simple application.

var users = new Dictionary<string, User>
{
   { 
      "admin", 
      new User(username: "admin", 
               password: "secret", 
               role: "Administrator") 
   }
};

var authenticationService = new AuthenticationService(users); 

// Note that we need to pass in the authentication service in order
// for the login view to authenticate the user.
var loginView = new LoginView(authenticationService);

var validUser = loginView.Display();

if (validUser.Role == "Administrator")
{
   ...
}

Tip: Instead of checking against a string, you could use an enum, like so:

public enum Role
{
   Administrator
}

You would then use an if or switch statement to check whether or not the user has that role like so:

if (validUser.Role == Role.Administrator)
{
   ...
}

or


switch (validUser.Role)
{
   case Role.Administrator:

      ...
      break;
}

Administrator main view
Available operations and data are usually divided into specific areas, or views, in an application. As an example, system administrators should be able to perform things as “Administer users”, where in turn they should have the option of adding or deleting users.

We need to create a view that can display a list of choices, a menu. This view also needs to be able to handle the selection made by the user.

1. Manage users
2. Exit

> 

Administrator main view
Manage users
The manage users view should provide us with the option of adding and deleting users.

1. Add user
2. Delete user

> 

Manage users view
Add user view
It’s very common that applications allows us to both enter and edit information, besides providing us access to what’s already being handled by the system. Our application should provide a simple data entry form for adding new users to the system. In that way we’ve provided an example data entry view that can be re-used when extending the application.

# Add user

Username: 
Password: 
Role: 

Is this correct? (Y)es (N)o 

Add user view
Delete user view
We need a way to delete users from our system. For this we use the delete user view:

# Delete user

1. johndoe
2. janedoe
3. jimdoe

> 

Delete user view

We’ll need at least one user in our system from the start, which is a common practice. As can be seen above, that user is called "admin" and has the role of "Administrator".

We need define a view that’s responsible for prompting the user for a username and password, and upon successfully authenticated said user, allow the program to continue execution, using the role of the user as a way to decide what view to display next.


Services
AuthenticationService
The responsibility of authenticating a user should be encapsulated by a an whose soul purpose is to verify that the user is who she claims to be. We’ll define this as an interface, like so:

public interface IAuthenticationService
{
   User Authenticate(string username, string password);
}

Interface IAuthenticationService

Besides defining this interface, you’ll need to create an class that implements it, meaning that the class will need to define a method named Authenticate() that takes a username and password and returns a User object.

Here’s a bit of extra help with regards to where we need to keep our users in order for the application to work with them:

static void Main(string[] args)
{

   

   ...
}


Preparations
Create a new Console App (.NET Core)  in Visual Studio, naming it “MenuShell”, and placing it under C:\Workspace\MenuShell, like so:

Name:
MenuShell
Location:
C:\Workspace\MenuShell
Solution name:
MenuShell

Ensure you select “Create directory for solution” and “Create new Git repository” (might be called “Initialize new Git repository” or similar if you’re using Visual Studio Community Edition).

Click OK to create the project.

Open https://github.com/ECUtbildning-WIN18.

Create a new repository, naming it MenuShell-{your GitHub username}, e.g. if your GitHub username is "johndoe", you would name your repository "MenuShell-johndoe".

Leave everything else at it’s default and click “Create Repository”.

Open Cmder and go to C:\Workspace\ECUtbildning\MenuShell.

cd C:\Workspace\ECUtbildning\MenuShell

Create the develop branch in which the team will be working from:

git branch develop

Add a remote that points to the repo you created in GitHub (see NOTE below):

git remote add origin (command continuous below)
git@github.com:ECUtbildning-WIN18/MenuShell-{your GitHub username}.git

Push existing commits and branches to origin:

git push -u origin master
git push -u origin develop

